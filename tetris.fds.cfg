MEMORY {
    ZP:     start = $0000, size = $0100, type = rw, file = "";
    #OAM:    start = $0200, size = $0100, type = rw, file = "";
    RAM:    start = $0100, size = $1F00, type = rw, file = "";
    
    #HDR:    start = $0000, size = $0010, type = ro, fill = yes, fillval = $00;
    SIDE1A:   start = $0000, size = 65500, type = ro, file = %O, fill = yes, fillval = 0;
    
    PRG0:    start = $6000, size = $7FF6, type = rw file = "";
    VEC1:    start = $DFF6, size = $000A, type = rw, file = "";
    CHR2:    start = $0000, size = $1000, type = rw, file = "";
    CHR3:    start = $1000, size = $1000, type = rw, file = "";
    CHR4:    start = $1000, size = $1000, type = rw, file = "";
    CHR5:    start = $0000, size = $1000, type = rw, file = "";
	CHK6:    start = $2000, size = $0001, type = rw, file = "";
	CHK7:    start = $0000, size = $1000, type = rw, file = "";
}

SEGMENTS {
    ZEROPAGE: load = ZP;
    BSS:      load = RAM, type = bss;
    #HEADER:   load = HDR, type = ro;
    
    SIDE1A:    load = SIDE1A, type = ro;

	FILE0_HDR: load = SIDE1A, type = ro;
	FILE0_DAT: load = SIDE1A, run = PRG0, define = yes, align = 256;

	FILE1_HDR: load = SIDE1A, type = ro;
	FILE1_DAT: load = SIDE1A, run = VEC1, define = yes;

	FILE2_HDR: load = SIDE1A, type = ro;
	FILE2_DAT: load = SIDE1A, run = CHR2, define = yes;

	FILE3_HDR: load = SIDE1A, type = ro;
	FILE3_DAT: load = SIDE1A, run = CHR3, define = yes;

	FILE4_HDR: load = SIDE1A, type = ro;
	FILE4_DAT: load = SIDE1A, run = CHR4, define = yes;

	FILE5_HDR: load = SIDE1A, type = ro;
	FILE5_DAT: load = SIDE1A, run = CHR5, define = yes;

	FILE6_HDR: load = SIDE1A, type = ro;
	FILE6_DAT: load = SIDE1A, run = CHK6, define = yes;

	FILE7_HDR: load = SIDE1A, type = ro;
	FILE7_DAT: load = SIDE1A, run = CHK7, define = yes;
	
	# Keep the original segments for reference
	# (start addresses have been naively adjusted by $2000 to align with $6000)
    #PRG_chunk1:        load = PRG0, type = ro;
    #unreferenced_data1:load = PRG0, type = ro;
    #PRG_chunk2:        load = PRG0, type = ro, start = $BD00;
    #unreferenced_data4:load = PRG0, type = ro;
    #PRG_chunk3:        load = PRG0, type = ro, start = $DF00;
    #VECTORS:           load = PRG0, type = ro, start = $DFFA;
}
